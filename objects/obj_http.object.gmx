<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>url = 'http://www.polo.therevolve.com/ingame_news.php';

http = -1;

conn_status = 0;
action = 0;

statuscode = '';
statuscode_text = '';
headers = '';
message_body_length = 0;
message_body = '';

header_content_length = '';
header_content_type = '';

content_length = 0;

message_body_length_prev = 0;
message_body_time_prev = 0;
download_speed = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var a;

if http!=-1 {

if http_update(http) {

conn_status = http_get_conn_status(http);
action = http_get_action(http);

statuscode = http_get_statuscode(http);
statuscode_text = http_get_statuscode_text(http);
headers = string_copy(string_replace_all(http_get_headers(http),crlf,lf),1,1000);
message_body_length = http_get_message_body_length(http);
message_body = string_copy(string_replace_all(http_get_message_body(http),crlf,lf),1,1000);

header_content_length = http_get_header_value(http,'ConTeNT-leNGTh'); // case-insensitive
header_content_type = http_get_header_value(http,'content-type'); // case-insensitive

a = string_digits(header_content_length);
if a!='' {
content_length = real(header_content_length);
}

if current_time&gt;=message_body_time_prev+1000 {
if message_body_time_prev!=0 {
download_speed = round((message_body_length-message_body_length_prev)/(current_time-message_body_time_prev)); // bytes/ms = Kbytes/s
}
message_body_length_prev = message_body_length;
message_body_time_prev = current_time;
}

}

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>http_stopthread();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>httpdll_init();

if http_initerror() {
show_message('Initializing HTTP dll failed!');
game_end();
exit;
}

if !http_startthread() {
show_message('Failed to start socket thread!');
game_end();
exit;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if http!=-1 {

draw_set_font(font_bold);
draw_text(x,y,'HTTP object: Downloading "'+url+'"');

draw_set_font(font_bold);
draw_text(x+10,y+30,'Connection status: '+string(conn_status)+' ( 0=not connected / 1=connected / 2=closed / 3=disconnected )');
draw_text(x+10,y+50,'Currect action: '+string(action)+' ( 0=waiting for statuscode / 1=receiving headers / 2=receiving message body )');

draw_set_font(font_bold);
draw_text(x+10,y+80,'Statuscode: '+statuscode);
draw_text(x+10,y+100,'Statuscode text: '+statuscode_text);

draw_set_font(font_bold);
draw_text(x+10,y+130,'Headers:');
draw_set_font(font_normal);
draw_text(x+20,y+150,headers);

draw_set_font(font_bold);
draw_text(x+10,y+330,'Content-Length header: "'+header_content_length+'"');
draw_text(x+10,y+350,'Content-Type header: "'+header_content_type+'"');

draw_set_font(font_bold);
draw_text(x+10,y+380,'Message body length: '+string(message_body_length)+' bytes');
if message_body_length!=0 {
draw_text(x+310,y+380,'Download speed: '+string(download_speed)+' KBps');
}
if content_length!=0 {
draw_text(x+610,y+380,'Progress: '+string(floor(100*message_body_length/content_length))+'%');
}

draw_text(x+10,y+400,'Message body:');
draw_set_font(font_normal);
draw_text(x+20,y+420,message_body);

if conn_status=2 and action=2 {
draw_set_font(font_bold);
draw_text(x+10,y+650,'&gt;&gt; Press S to save the downloaded file');
}

} else {

draw_set_font(font_bold);
draw_text(x,y,'Press space to create HTTP object');
draw_text(x,y+20,'Press enter to test the netread script');

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var fname;

if http!=-1 {

if conn_status=2 and action=2 {

fname = get_save_filename('All files|*.*','');
if fname!='' {
http_save_message_body(http,fname);
}

}

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var data,name,value,hostname,port,filename;

if http=-1 {

url = get_string('Enter a URL:',url);

if url!='' {

url = http_urlencode(url,true);
hostname = http_url_get_hostname(url);
port = http_url_get_port(url);
filename = http_url_get_filename(url);
show_message('URL encoded: "'+url+'"#Hostname: "'+hostname+'"#Port: "'+port+'"#Filename: "'+filename+'"');

http = http_create();

if http=-1 {
show_message('Creating HTTP object failed!');
exit;
}

switch show_message_ext('Method: (default=GET)','GET','POST','Cancel') {

case 1:
http_set_method(http,'GET');
break;

case 2:
http_set_method(http,'POST');
data = '';
while 1 {
name = get_string('POST name: (leave empty to continue)','');
if name='' break;
value = get_string('POST value:','');
if data!='' then data += '&amp;';
data += http_urlencode(name,false)+'='+http_urlencode(value,false);
}
http_set_headers_in(http,
'Content-Type: application/x-www-form-urlencoded'+crlf+
'Content-Length: '+string(string_length(data))+crlf
);
http_set_message_body_in(http,data);
break;

default:
http_destroy(http);
http = -1;
exit;

}

http_set_filename(http,filename);

if !http_connect(http,hostname,port) {
show_message('Connecting to server failed!');
http_destroy(http);
http = -1;
exit;
}

}

} else {

http_destroy(http);
http = -1;

conn_status = 0;
action = 0;

statuscode = '';
statuscode_text = '';
headers = '';
message_body_length = 0;
message_body = '';

header_content_length = '';
header_content_type = '';

content_length = 0;

message_body_length_prev = 0;
message_body_time_prev = 0;
download_speed = 0;

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_message(netread(get_string('URL:','http://www.google.com/')));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
